buildscript {
    ext.kotlin_version = '1.1.3'
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "http://repo.maven.apache.org/maven2" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: 'kotlin'
apply plugin: "maven-publish"
apply plugin: "maven"

archivesBaseName = "teslathingies"
group = "net.ndrei.$archivesBaseName" // http://maven.apache.org/guides/mini/guide-naming-conventions.html

version = "${project.minecraft_version}-${project.mod_version}"
if (project.hasProperty('mod_suffix')) {
    version += "-${project.mod_suffix}"
    if (project.mod_suffix == 'snapshot') {
        version += "_" + getDate()
    }
}

compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "${minecraft_version}-${forge_version}"
    mappings = "${mcp_version}"
    runDir = "run"
    makeObfSourceJar = false
}

configurations {
    compile.extendsFrom exportedCompile
    deployerJars

    all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url 'http://maven.epoxide.xyz' }
    maven { url 'http://maven.ndrei.net' }
    maven { url "http://dvs1.progwml6.com/files/maven" }
    maven { url 'http://maven.shadowfacts.net/' }
}

dependencies {
    // compile against the JEI API
    deobfCompile "mezz.jei:jei_${minecraft_version}:${jei_version}:api"
    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_${minecraft_version}:${jei_version}"

    compile "net.darkhax.tesla:Tesla-1.12:${tesla_version}:deobf"
    compile ("net.ndrei.tesla-core-lib:tesla-core-lib:${minecraft_version}-${tesla_core_version}:deobf") { changing = true }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "net.shadowfacts:Forgelin:$forgelin_version"

    deployerJars 'org.apache.maven.wagon:wagon-ftp:2.2'
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    archives sourceJar, deobfJar
}

if (project.hasProperty('mavenFTPServer') && project.hasProperty('mavenFTPUser') && project.hasProperty('mavenFTPPassword')
        && !project.hasProperty('mavenLocalPath')) {
    uploadArchives {
        repositories.mavenDeployer {
            dependsOn build, deobfJar, sourcesJar
            configuration = configurations.deployerJars
            repository(url: project.mavenFTPServer) {
                authentication(userName: project.mavenFTPUser, password: mavenFTPPassword)
            }
        }
    }
}
uploadArchives.dependsOn build, sourcesJar, deobfJar
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd') // HHmmss')
    return formattedDate
}

